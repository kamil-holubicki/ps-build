#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      DEFAULT_TESTING = (yes no)
#      HOTBACKUP_TESTING = (yes no)
#      TOKUDB_ENGINES_MTR = (yes no)
#      MTR_ARGS
#      MTR_REPEAT
#      MTR_SUITES
#      DOCKER_OS

set -o errexit
set -o xtrace

echo "Starting tests on worker ${WORKER_NO}"
cat /proc/meminfo
cat /proc/cpuinfo

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS/sql
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)

mkdir -p ${WORKDIR_ABS}/unittest && ln -sf ${WORKDIR_ABS}/PS ${WORKDIR_ABS}/unittest/gunit
ln -sf ${WORKDIR_ABS}/PS/runtime_output_directory ${WORKDIR_ABS}/runtime_output_directory
ln -sf ${WORKDIR_ABS}/PS/plugin_output_directory ${WORKDIR_ABS}/plugin_output_directory
ln -sf ${WORKDIR_ABS}/PS/library_output_directory ${WORKDIR_ABS}/library_output_directory

cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30
PARALLEL=$(grep -c ^processor /proc/cpuinfo)
# CentOS 6 & 7
if [[ -f /opt/rh/devtoolset-8/enable ]]; then
    source /opt/rh/devtoolset-8/enable
fi

# Centos 6/i386
if [[ $(rpm --eval %_arch) = "i386" ]] && [[ -f /opt/rh/devtoolset-2/enable ]]; then
    source /opt/rh/devtoolset-2/enable
fi

# TODO: This should be already there in the Docker container
if [ -f /etc/redhat-release ]; then
    RHEL=$(rpm --eval %rhel)
    if [ "$RHEL" == 8 ]; then
        pushd /etc/yum.repos.d/
        sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
        sudo sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        popd
    fi
    sudo yum install -y rsync cpanminus
    sudo cpanm --notest Expect
else
    sudo apt -y update
    sudo apt -y install rsync cpanminus
    sudo cpanm --notest Expect
fi

OPENSSL_HEADER="/usr/include/openssl/opensslv.h"
TOKUDB_PLUGIN=$(find $WORKDIR_ABS/PS/plugin_output_directory -type f -name 'ha_tokudb.so')
HOTBACKUP_LIB=$(find $WORKDIR_ABS/PS -type f -name 'libHotBackup.so')
HOTBACKUP_PLUGIN=$(find $WORKDIR_ABS/PS/plugin_output_directory -type f -name 'tokudb_backup.so')
JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)
OPENSSL_VER=$(grep -o 'define SHLIB_VERSION_NUMBER .*$' ${OPENSSL_HEADER} | awk -F'"' '{print $(NF-1)}' | sed -e 's:[a-z]::g')

#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
MTR_ARGS+=" --timestamp --report-unstable-tests"
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  [[ ${OPENSSL_VER} < '1.0.2' ]] && export OPENSSL_ia32cap=~0x200000000000000
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
  if [[ ${PARALLEL} -gt 1 ]]; then
    PARALLEL=$((PARALLEL/3))
  fi
fi

if [[ "${ANALYZER_OPTS}" == *WITH_*SAN*=ON* ]]; then
    MTR_ARGS+=" --sanitize"
fi

if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
  export ASAN_OPTIONS=allocator_may_return_null=true
  # trying to find the proper library
  MYSQLD=$(find ${WORKDIR_ABS}/PS/bin -name mysqld)
  LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
  ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_SUITES}" == *"max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

#
# execute big tests in separate run
BIG_TEST=0
ONLY_BIG_TEST=0
if [[ $MTR_ARGS == *"--big-test"* ]]; then
    BIG_TEST=1
fi
if [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    ONLY_BIG_TEST=1
    BIG_TEST=1
fi
MTR_ARGS=${MTR_ARGS//"--big-test"/""}
MTR_ARGS=${MTR_ARGS//"--only-big-test"/""}

#
# unit tests
UNIT_TESTS=0
if [[ $MTR_ARGS == *"--unit-tests-report"* ]]; then
    UNIT_TESTS=1
fi
MTR_ARGS=${MTR_ARGS//"--unit-tests-report"/""}

#
# Running MTR test cases
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
    MYSQLD_ENV=--mysqld-env=\"LD_PRELOAD=${ADD_TO_LD_PRELOAD:-}${EATMYDATA}\"
else
    MYSQLD_ENV=--mysqld-env=\"LD_PRELOAD=${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}\"
fi

status=0
#
# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then
#>>>> main MTR execution loop starts here
    ARRAY_MTR_SUITES=($(echo $MTR_SUITES | sed 's/,/ /g'))
    for suite in "${ARRAY_MTR_SUITES[@]}"; do
        only_big_tests_this=$ONLY_BIG_TEST
        big_tests_this=$BIG_TEST

        # suite may be in form:
        # main
        # main|big
        # main|nobig
        arrSuite=(${suite//|/ })
        suite=${arrSuite[0]}
        big=${arrSuite[1]}

        if [[ "${big}" == "big" ]]; then
            only_big_tests_this=1
            # if big tests are executed or not depends on --big-tests
        fi
        if [[ "${big}" == "nobig" ]]; then
            # if normal tests are executed or not depends on --big-tests
            big_tests_this=0
        fi

        WORKER=${PARALLEL}
        suiteNoSlash=${suite//"/"/"_"}
        echo "Running MTR suite: $suite (noslash: $suiteNoSlash)"

        start=`date +%s`

        if [[ $only_big_tests_this == "0" ]]; then
            echo "Executing normal tests for suite $suite"

            df -h
            du -sh /dev/shm

            MTR_ARGS_NORMAL=${MTR_ARGS}

            if [[ $UNIT_TESTS == "1" ]]; then
                MTR_ARGS_NORMAL+=" --unit-tests-report"
                UNIT_TESTS=0
            fi

            MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
                --result-file --suite=$suite \
                --force ${MYSQLD_ENV} \
                --max-test-fail=0 \
                --suite-timeout=9999 --parallel $WORKER \
                --testcase-timeout=${TESTCASE_TIMEOUT} \
                ${MTR_ARGS_NORMAL} \
                --junit-output=${WORKDIR_ABS}/junit_${suiteNoSlash}.xml \
                --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

            ln -s $PWD/var $PWD/var_${suiteNoSlash}
            which rsync
            rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} $PWD/mtr_var

            killall -9 mysqld || true
            rm -rf $PWD/var_${suiteNoSlash}

            df -h
            du -sh /dev/shm
        fi
        end=`date +%s`
        runtime=$((end-start))
        echo KH,SUITE_NO_BIG,${suite},time,$runtime

        if [[ $big_tests_this == "1" ]]; then
            echo "Executing big tests for suite $suite"
            MTR_ARGS_BIG=${MTR_ARGS}
            MTR_ARGS_BIG+=" --only-big-test"
            suiteNoSlash+="_bigtest"
            TESTCASE_TIMEOUT_BIG=$((TESTCASE_TIMEOUT * 2))

            if [[ $UNIT_TESTS == "1" ]]; then
                MTR_ARGS_BIG+=" --unit-tests-report"
                UNIT_TESTS=0
            fi

            MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
                --result-file --suite=$suite \
                --force ${MYSQLD_ENV} \
                --max-test-fail=0 \
                --suite-timeout=9999 --parallel $WORKER \
                --testcase-timeout=${TESTCASE_TIMEOUT_BIG} \
                ${MTR_ARGS_BIG} \
                --junit-output=${WORKDIR_ABS}/junit_${suiteNoSlash}.xml \
                --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

            ln -s $PWD/var $PWD/var_${suiteNoSlash}
            which rsync
            rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} $PWD/mtr_var

            killall -9 mysqld || true
            rm -rf $PWD/var_${suiteNoSlash}

            df -h
            du -sh /dev/shm
        fi

        end=`date +%s`
        runtime=$((end-start))
        echo KH,SUITE_TOTAL,${suite},time,$runtime

    done
fi
#<<<< main MTR execution loop ends here

#
# CI FS tests
if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    echo "Running CI FS tests"
    start=`date +%s`

    # no --mem allowed if vardir specified
    MTR_ARGS=${MTR_ARGS//"--mem"/""}

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS+=" --big-test"
    fi

    CI_TESTS=""
    for CI_TESTS_TMP in $(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $NF}' | sed 's/.test//g'); do
        CI_TESTS+=" $CI_TESTS_TMP"
    done
    # Requested in PS-7602
    if [[ ${CMAKE_BUILD_TYPE} = 'Debug' ]]; then
        CI_TESTS+=" information_schema.i_s_schema_definition_debug"
    fi

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --result-file \
        --force ${MYSQLD_ENV} \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --parallel=$(nproc) \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS} \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir" \
        ${CI_TESTS} \
        --junit-output=${WORKDIR_ABS}/junit_ci_fs.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ci_fs" || true

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,CI_FS_tests,time,$runtime
fi

# KH: this stuff will not happen now
#
if [[ "$HOTBACKUP_TESTING" != "no" ]] && [[ -n "${TOKUDB_PLUGIN}" ]] && [[ -n "${HOTBACKUP_LIB}" ]] && [[ -n "${HOTBACKUP_PLUGIN}" ]]; then
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${HOTBACKUP_LIB}:${JEMALLOC}:${EATMYDATA}"

    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        --parallel=${PARALLEL} \
        ${MTR_ARGS} \
        --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --suite tokudb_backup \
        --junit-output=${WORKDIR_ABS}/junit_tokudb_hotbackup.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb_hotbackup" || true
fi

# KH: this stuff will not happen now
#
#
# if there's tokudb plugin compiled run tokudb tests else exit with previous status
if [[ "${TOKUDB_ENGINES_MTR}" = "yes" ]] && [[ -n "${TOKUDB_PLUGIN}" ]]; then
  # this is a workaround because mtr is looking for ha_tokudb.so in source_dir in lib/plugins/mysql when it's actually in builddir/storage/tokudb
  mkdir -p lib/mysql/plugin
  ln -s ${TOKUDB_PLUGIN} lib/mysql/plugin/ha_tokudb.so
  ln -s ${HOTBACKUP_PLUGIN} lib/mysql/plugin/tokudb_backup.so

    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    MTR_BUILD_THREAD=auto \
        ./mtr --suite=engines/iuds,engines/funcs \
            --mysqld=--default-storage-engine=tokudb --mysqld=--default-tmp-storage-engine=tokudb \
            --suite-timeout=9999 --testcase-timeout=${TESTCASE_TIMEOUT} --parallel=${PARALLEL} --big-test --force --max-test-fail=0 \
            --mysqld=--plugin-load=tokudb=ha_tokudb.so --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
            --mysqld=--loose-tokudb_auto_analyze=0 --mysqld=--loose-tokudb_analyze_in_background=false \
            ${TOKUDB_ENGINES_MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit_tokudb.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb" || true
fi

# KH: this stuff will not happen now
#
# if all tests are disabled, run only one small test to prevent test stage issue and perform simle test of binary file
if [[ "${TOKUDB_ENGINES_MTR}" = 'no' ]] && [[ "${HOTBACKUP_TESTING}" = 'no' ]] && [[ "${DEFAULT_TESTING}" = 'no' ]] ; then
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        main.1st \
        --junit-output=${WORKDIR_ABS}/small.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.small" || true
fi


# KH: this stuff will not happen now
if [[ ${ZEN_FS_MTR} = 'yes' ]] && [[ ${WITH_ROCKSDB} = 'ON' ]]; then
    if [[ ${DOCKER_OS} = 'ubuntu-focal' ]] || [[ ${DOCKER_OS} = 'ubuntu-hirsute' ]] || [[ ${DOCKER_OS} = 'debian-bullseye' ]]; then
        sudo install --owner=root --group=root --mode=+rx ${WORKDIR_ABS}/PS/runtime_output_directory/zenfs /usr/bin/

        sudo rm -rf /tmp/zenfs* || true
        for nulldevice in {0..5}; do
            sudo rm -rf /tmp/zenfs_aux/nullb$nulldevice || true
        done

        mkdir -p /tmp/zenfs_aux

        for nulldevice in {0..5}; do
            zenfs mkfs --zbd=nullb$nulldevice --aux_path=/tmp/zenfs_aux/nullb$nulldevice

            zenfs df --zbd nullb$nulldevice
            zenfs list --zbd nullb$nulldevice

            blkzone report /dev/nullb$nulldevice
        done
        zenfs ls-uuid

        if [[ ${CMAKE_BUILD_TYPE} = "Debug" ]]; then
            ROCKSDB_ZENFS_MTR_ARGS="--debug-server"
        fi

        SOURCE_FS_URI1=zenfs://dev:nullb0 SOURCE_FS_URI2=zenfs://dev:nullb1 SOURCE_FS_URI3=zenfs://dev:nullb2 \
        REPLICA_FS_URI1=zenfs://dev:nullb3 REPLICA_FS_URI2=zenfs://dev:nullb4 REPLICA_FS_URI3=zenfs://dev:nullb5 \
        MTR_BUILD_THREAD=auto ./mtr \
            --force \
            --max-test-fail=0 \
            --suite-timeout=9999 \
            --testcase-timeout=${TESTCASE_TIMEOUT} \
            --big-test \
            --defaults-extra-file=include/zenfs_nullb_emulated_parallel_rpl.cnf \
            --fs-cleanup-hook="@lib/zenfs_cleanup_rpl.sh" \
            --parallel=3 \
            --suite=rocksdb \
            ${ROCKSDB_ZENFS_MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit_rocksdb_zenfs.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.rocksdb_zenfs" || true
    fi
fi

# KH: this stuff will not happen now
#
if [[ ${KEYRING_VAULT_MTR} == 'yes' ]] && [[ ${DOCKER_OS} != 'centos-6' ]] && [[ ${DOCKER_OS} != 'i386/centos-6' ]]; then
    if [ -f /usr/bin/yum ]; then
        if [[ -f /opt/rh/httpd24/enable ]]; then
            source /opt/rh/httpd24/enable
        fi
    fi

    echo "Running tests with Hashicorp Vault in Dev mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v2" || true

    echo "Running tests with Hashicorp Vault in Production mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v1-ca.pem" \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v2-ca.pem" \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v2" || true
fi

exit $status
